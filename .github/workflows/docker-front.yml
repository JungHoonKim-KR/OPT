name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - front 

jobs:
  run-on-merge:
    runs-on: ubuntu-latest


    if: github.event.pull_request.merged == true || github.event_name == 'push'

    steps:
      # 1. 디버깅: 이벤트 정보 출력
      - name: Debug Event Info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref || 'N/A' }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref || 'N/A' }}"
          echo "Merged: ${{ github.event.pull_request.merged || 'N/A' }}"

      # 2. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4. Docker 로그인 (Docker Hub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          # 3. 빌드 컨텍스트 경로 수정 (./front)
          docker build --no-cache -t junghoonkim/front:latest ./front
          # 4. 이미지 이름 수정 (junghoonkim/front)
          docker push junghoonkim/front:latest


      # 6. 배포 서버에 SSH로 접속하여 최신 Docker 이미지 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            # Docker Compose 설정도 'front' 서비스 이름에 맞게 수정해야 합니다.
            # (docker-compose.yml 파일 내 서비스 이름이 front라고 가정)
            docker compose pull front
            docker compose down front || true
            docker compose up -d front
